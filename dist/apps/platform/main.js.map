{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;ACAA;;;;;;;;;;ACAA,wCAAwC;AACxC,gDAAqD;AACrD,6CAA+C;AAC/C,+CAAsD;AAO/C,IAAM,SAAS,GAAf,MAAM,SAAS;CAAG;AAAZ,8BAAS;oBAAT,SAAS;IALrB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,4BAAY,CAAC;QACvB,WAAW,EAAE,CAAC,8BAAa,CAAC;QAC5B,SAAS,EAAE,CAAC,wBAAU,CAAC;KACxB,CAAC;GACW,SAAS,CAAG;;;;;;;ACVzB;;;;;;;;;;;ACAA,wCAAiD;AACjD,6CAA2C;AAGpC,IAAM,aAAa,GAAnB,MAAM,aAAa;IACxB,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGvD,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;CACF;AAPY,sCAAa;AAIxB;IADC,gBAAG,GAAE;;;;4CAGL;wBANU,aAAa;IADzB,uBAAU,GAAE;iEAE8B,wBAAU,oBAAV,wBAAU;GADxC,aAAa,CAOzB;;;;;;;;;;;ACXD,wCAA4C;AAGrC,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,OAAO;QACL,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;IAClC,CAAC;CACF;AAJY,gCAAU;qBAAV,UAAU;IADtB,uBAAU,GAAE;GACA,UAAU,CAItB;;;;;;;;;;;ACPD,wCAAgD;AAChD,gDAAiD;AAEjD;;;;;;;GAOG;AAMI,IAAM,YAAY,GAAlB,MAAM,YAAY;CAAG;AAAf,oCAAY;uBAAZ,YAAY;IALxB,mBAAM,GAAE;IACR,mBAAM,EAAC;QACN,SAAS,EAAE,8BAAa;QACxB,OAAO,EAAE,8BAAa;KACvB,CAAC;GACW,YAAY,CAAG;;;;;;;;;;AChB5B,4CAAyC;AAE5B,qBAAa,GAAG,CAAC,sBAAS,CAAC,CAAC;;;;;;;;;;;ACFzC,wCAA4C;AAC5C,0CAAwC;AACxC,uCAA4B;AAC5B,6CAA6D;AAE7D;;;;;;;;;;GAUG;AAEI,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,gBAA0B;IACvD;QACE,KAAK,CAAC,sBAAS,EAAE;YACf,SAAS,EAAE,eAAI,EAAC,SAAS,EAAE,SAAS,CAAC;YACrC,gBAAgB,EAAE,YAAY;SAC/B,CAAC,CAAC;IACL,CAAC;IAED,IAAI,GAAG;QACL,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,MAAM;QACR,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpD,CAAC;CACF;AAnBY,8BAAS;oBAAT,SAAS;IADrB,uBAAU,GAAE;;GACA,SAAS,CAmBrB;;;;;;;;;;ACpCD,uDAAoC;AACpC,uDAA8B;;;;;;;;;;;ACD9B,qCAA8C;AAC9C,2DAAgC;AAChC,uCAA4B;AAoC5B;;;;;GAKG;AACH,MAAM,eAAe,GAAG,CAAC,OAAwB,EAAU,EAAE;IAC3D,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,aAAa,CAAC;IACrD,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,eAAI,EAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAEjE,OAAO,eAAI,EAAC,SAAS,EAAE,GAAG,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,YAAY,GAAG,CAAC,QAAgB,EAA2B,EAAE;IACjE,mCAAmC;IACnC,IAAI,CAAC,mBAAU,EAAC,QAAQ,CAAC,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,YAAY,QAAQ,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,OAAO,GAAG,qBAAY,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC/C,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAA4B,CAAC;AACvD,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,WAAW,GAAG,CAClB,MAA+B,EAC/B,MAAsB,EACnB,EAAE;IACL,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,0DAA0D;QAC1D,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QACvD,OAAO,SAAS,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC9B,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACI,MAAM,kBAAkB,GAAG,CAChC,OAAwB,EACxB,MAAsB,EACnB,EAAE;IACL,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QACxC,OAAO,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAChC,sBAAsB;QACtB,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,EAAE,CAAC;YACvC,MAAM,KAAK,CAAC;QACd,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC,CAAC;AAhBW,0BAAkB,sBAgB7B;;;;;;;AC5IF;;;;;;ACAA;;;;;;ACAA;;;;;;;;;ACCA,gDAAsE;AAEtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiDG;AACH,MAAa,MAAM;IAIjB;;;;OAIG;IACH,YAAY,MAAoB,EAAE,OAAwB;QACxD,MAAM,MAAM,GAAG,sCAAkB,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AArBD,wBAqBC;;;;;;;;;;AC1ED,sCAAwB;AACxB,+CAA+D;AAElD,iBAAS,GAAG,OAAC,CAAC,MAAM,CAAC;IAChC;;OAEG;IACH,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC;QACZ,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,iBAAiB;QACxD,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,oBAAoB;QAC7D,QAAQ,EAAE,OAAC;aACR,IAAI,CAAC,CAAC,0BAAW,CAAC,WAAW,EAAE,0BAAW,CAAC,UAAU,EAAE,0BAAW,CAAC,IAAI,CAAC,CAAC;aACzE,OAAO,CAAC,0BAAW,CAAC,WAAW,CAAC,EAAE,uBAAuB;KAC7D,CAAC;IAEF;;OAEG;IACH,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;QACf,gBAAgB,EAAE,OAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE,aAAa;KAC9D,CAAC;IAEF;;OAEG;IACH,QAAQ,EAAE,OAAC,CAAC,MAAM,CAAC;QACjB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,SAAS;QAC3B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,QAAQ;QAC9B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,UAAU;QAC5B,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;QACrC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,QAAQ;QAC1B,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,EAAE,yBAAyB;QACnD,IAAI,EAAE,OAAC;aACJ,MAAM,CAAC;YACN,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YAC1B,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YAC1B,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YACnC,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YACtC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;SACpC,CAAC;aACD,QAAQ,EAAE;QACb,iBAAiB,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,sCAAsC;KACpG,CAAC;CACH,CAAC,CAAC;;;;;;;AC3CH;;;;;;;;;ACAA,sBAAsB;AACT,iBAAS,GAAG,UAAU,CAAC;AAEpC,gBAAgB;AACH,wBAAgB,GAAG,gBAAgB,CAAC;AAEjD;;;GAGG;AACH,IAAY,WAWX;AAXD,WAAY,WAAW;IACrB,WAAW;IACX,8BAAe;IACf,WAAW;IACX,0CAA2B;IAC3B,YAAY;IACZ,kCAAmB;IACnB,WAAW;IACX,wCAAyB;IACzB,WAAW;IACX,4BAAa;AACf,CAAC,EAXW,WAAW,2BAAX,WAAW,QAWtB;AAED;;;GAGG;AACH,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,YAAY;IACZ,iCAAmB;IACnB,8BAA8B;IAC9B,+CAAiC;IACjC,0BAA0B;IAC1B,+CAAiC;AACnC,CAAC,EAPW,UAAU,0BAAV,UAAU,QAOrB;AAED;;;GAGG;AACH,IAAY,KAKX;AALD,WAAY,KAAK;IACf,SAAS;IACT,oBAAW;IACX,SAAS;IACT,sBAAa;AACf,CAAC,EALW,KAAK,qBAAL,KAAK,QAKhB;AAED,sBAAsB;AACT,0BAAkB,GAAG;IAChC,2BAA2B;IAC3B,gBAAgB;IAChB,uBAAuB;IACvB,gBAAgB;IAChB,mBAAmB;IACnB,sBAAsB;CACvB,CAAC;AAEF,aAAa;AACA,0BAAkB,GAAG,EAAE,CAAC;AAErC,aAAa;AACA,4BAAoB,GAAG,CAAC,CAAC;AAEtC,aAAa;AACA,sBAAc,GAAG,QAAQ,CAAC;;;;;;UChEvC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;AAEH,wCAAwC;AACxC,sCAA2C;AAC3C,4CAAyC;AAEzC,KAAK,UAAU,SAAS;IACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAChD,MAAM,YAAY,GAAG,KAAK,CAAC;IAC3B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAClC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;IACtC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvB,eAAM,CAAC,GAAG,CACR,kDAAkD,IAAI,IAAI,YAAY,EAAE,CACzE,CAAC;AACJ,CAAC;AAED,SAAS,EAAE,CAAC","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///./src/app/app.controller.ts","webpack:///./src/app/app.service.ts","webpack:///./src/config/config.module.ts","webpack:///./src/config/config.service.ts","webpack:///./src/config/env.config.ts","webpack:///../../packages/zod-env/src/index.ts","webpack:///../../packages/zod-env/src/lib/z-yaml-loader.ts","webpack:///external node-commonjs \"fs\"","webpack:///external commonjs \"js-yaml\"","webpack:///external node-commonjs \"path\"","webpack:///../../packages/zod-env/src/lib/zod-env.ts","webpack:///./src/config/env-schema.ts","webpack:///external commonjs \"zod\"","webpack:///./src/common/constants/app.constant.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\nimport { AppController } from './app/app.controller';\nimport { AppService } from './app/app.service';\nimport { ConfigModule } from './config/config.module';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello API' };\n  }\n}\n","import { Global, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n/**\n * ConfigModule\n *\n * 职责：\n * 1. 提供全局配置服务\n * 2. 管理配置的加载和注入\n * 3. 确保配置的单例性\n */\n@Global()\n@Module({\n  providers: ConfigService,\n  exports: ConfigService,\n})\nexport class ConfigModule {}\n","import { EnvConfig } from './env.config';\n\nexport const ConfigService = [EnvConfig];\n","import { Injectable } from '@nestjs/common';\nimport { ZodEnv } from '@aiofc/zod-env';\nimport { join } from 'path';\nimport { EnvSchema, EnvValidatedConfig } from './env-schema';\n\n/**\n * EnvService 类\n *\n * 这是一个工具类，负责把经过验证的环境变量（EnvValidatedConfig）分解为若干个配置组，\n * 这些配置组被暴露为属性，供应用程序使用。\n *\n * 职责：\n * 1. 管理应用程序的配置\n * 2. 通过依赖注入提供配置数据\n * 3. 提供类型安全的配置访问接口\n */\n@Injectable()\nexport class EnvConfig extends ZodEnv<EnvValidatedConfig> {\n  constructor() {\n    super(EnvSchema, {\n      configDir: join(__dirname, '/assets'),\n      configFilePrefix: 'app.config',\n    });\n  }\n\n  get app() {\n    return Object.freeze({ ...this.config.app });\n  }\n\n  get logger() {\n    return Object.freeze({ ...this.config.logger });\n  }\n\n  get database() {\n    return Object.freeze({ ...this.config.database });\n  }\n}\n","export * from './lib/z-yaml-loader';\nexport * from './lib/zod-env';\n","import { readFileSync, existsSync } from 'fs';\nimport * as yaml from 'js-yaml';\nimport { join } from 'path';\nimport { z } from 'zod';\n\n/**\n * 接口用于描述配置文件（yaml）的设置选项\n * @remarks\n * 包括:\n * - 配置文件的存放目录\n * - 配置文件的文件名前缀\n * 通过这些选项，可以灵活地指定配置文件的存放位置和文件命名方式。\n *\n * 命名规则:\n * - 配置文件的文件名格式为: `{prefix}.{NODE_ENV}.yaml`\n *\n * @example\n * ```typescript\n * const options: YamlFileOptions = {\n *   configDir: '/path/to/config',    // 配置文件存放目录\n *   configFilePrefix: 'app'          // 生成的配置文件名将为: app.development.yaml\n * };\n * ```\n */\nexport interface YamlFileOptions {\n  /**\n   * 配置文件目录路径\n   * @default process.cwd()/assets\n   */\n  configDir?: string;\n  /**\n   * 配置文件名称前缀\n   * @default 'config'\n   * @remarks 最终的配置文件名格式为: `{prefix}.{NODE_ENV}.yaml`\n   */\n  configFilePrefix: string;\n}\n\n/**\n * 构建配置文件路径\n * @param options 配置文件选项\n * @returns 配置文件路径\n * @throws 当未提供必需的configFilePrefix时抛出错误\n */\nconst buildConfigPath = (options: YamlFileOptions): string => {\n  if (!options.configFilePrefix) {\n    throw new Error('configFilePrefix is required');\n  }\n\n  const env = process.env['NODE_ENV'] || 'development';\n  const prefix = options.configFilePrefix;\n  const configDir = options.configDir || join(__dirname, 'assets');\n\n  return join(configDir, `${prefix}.${env}.yaml`);\n};\n\n/**\n * 读取YAML文件内容\n * @param filePath 配置文件路径\n * @returns 配置文件内容\n */\nconst readYamlFile = (filePath: string): Record<string, unknown> => {\n  // console.log('获取配置文件', filePath);\n  if (!existsSync(filePath)) {\n    throw new Error(`配置文件不存在: ${filePath}`);\n  }\n\n  const content = readFileSync(filePath, 'utf8');\n  return yaml.load(content) as Record<string, unknown>;\n};\n\n/**\n * 配置验证函数\n * @param config 待验证的配置对象\n * @returns 经过验证和类型转换的配置对象\n * @throws 当验证失败时抛出错误\n */\nconst envValidate = <T>(\n  config: Record<string, unknown>,\n  schema: z.ZodSchema<T>,\n): T => {\n  try {\n    const validated = schema.parse(config);\n    console.log('验证通过:', JSON.stringify(validated, null, 2));\n    // process.env['NODE_ENV'] = config['NODE_ENV'] as string;\n    console.log('配置参数验证通过，当前环境:', process.env['NODE_ENV']);\n    return validated;\n  } catch (error) {\n    console.error('验证失败:', error);\n    throw error;\n  }\n};\n\n/**\n * 用于加载配置文件（yaml）并验证设定环境变量的函数。\n * @remarks\n * 该函数会根据NODE_ENV环境变量加载对应的配置文件，并使用Zod schema进行验证。\n * 如果配置文件不存在或验证失败，则抛出错误并退出进程。\n *\n * @param options - 配置文件选项,用于指定配置文件的位置和前缀\n * @param schema - Zod schema对象,用于验证配置文件内容\n * @returns 经过验证的配置对象\n * @throws 当配置文件不存在或验证失败时退出进程\n * @example\n * ```typescript\n * // 定义配置schema\n * const configSchema = z.object({\n *   port: z.number(),\n *   host: z.string(),\n *   database: z.object({\n *     url: z.string(),\n *   })\n * });\n *\n * // 加载并验证配置\n * const config = loadYamlEnvOptions({\n *   configDir: './config',\n *   configFilePrefix: 'app'\n * }, configSchema);\n *\n * // 使用配置\n * console.log(config.port); // 类型安全的访问\n * ```\n */\nexport const loadYamlEnvOptions = <T>(\n  options: YamlFileOptions,\n  schema: z.ZodSchema<T>,\n): T => {\n  try {\n    const configPath = buildConfigPath(options);\n    const config = readYamlFile(configPath);\n    return envValidate(config, schema);\n  } catch (error) {\n    console.error('配置加载失败:', error);\n    // 测试环境下直接抛出错误，而不是退出进程\n    if (process.env['NODE_ENV'] === 'test') {\n      throw error;\n    }\n    process.exit(1);\n  }\n};\n","module.exports = require(\"fs\");","module.exports = require(\"js-yaml\");","module.exports = require(\"path\");","import { z } from 'zod';\nimport { loadYamlEnvOptions, YamlFileOptions } from './z-yaml-loader';\n\n/**\n * 用于加载和管理配置的功能类\n * @see {@link AppConfig}\n * @remarks\n * 该类封装了配置文件的加载和验证过程，并提供类型安全的配置访问方式。\n * 使用`ZodSchema`进行配置验证，采用`YAML`格式文档作为配置文件。\n *\n * @typeParam T - 配置对象的类型\n *\n * 一般来说，每个项目都会有配置文件的加载和验证的过程，这部分的逻辑是通用的。\n * 不同的项目差异体现在配置对象的类型和验证规则的定义，所以，我们应该把这部分逻辑从代码中分离出来。\n * 交由消费者在调用时来完成，从而增强代码的可复用性和灵活性。\n *\n * 通过泛型参数`T`，我们把差异化的部分——配置对象的类型定义和验证规则定义，隔离在类的外部，由消费者根据项目的需求完成这部分逻辑代码的编写，\n * 并通过调用本类来复用配置文件的加载和验证过程的逻辑。\n *\n * 同时，配置内容封装为类的成员，使IDE能提供自动完成和类型检查功能，提高开发效率。\n * @see {@link typedoc} 查看更多\n * @see your developer SDK for code samples\n *\n * @document externaldocs/demo.md\n *\n * @example\n * ```typescript\n * // 定义配置schema\n * const configSchema = z.object({\n *   port: z.number(),\n *   host: z.string(),\n *   database: z.object({\n *     url: z.string()\n *   })\n * });\n *\n * // 创建ZodEnv实例\n * const env = new ZodEnv(configSchema, {\n *   configDir: './config',\n *   configFilePrefix: 'app'\n * });\n *\n * // 使用配置\n * const config = env.config;\n * console.log(config.port);    // 类型安全的访问\n * console.log(config.host);    // IDE会提供自动完成\n * ```\n * @see {@link https://tools.ietf.org/html/rfc1738| RFC 1738}\n *\n * [RFC 1738](https://tools.ietf.org/html/rfc1738)\n *\n * ![RFC 1738](https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3w7jaH3B0aNtw8NPhF6CPm/8af4c055c48aa7b1a2ffcdaf341117bf/511102367_1ce398ad1d_o.png)\n */\nexport class ZodEnv<T> {\n  /** 存储验证后的配置对象 */\n  private _config: T;\n\n  /**\n   * 用于创建ZodEnv实例\n   * @param schema - 用于验证配置的Zod Schema\n   * @param options - YAML配置文件的选项\n   */\n  constructor(schema: z.ZodType<T>, options: YamlFileOptions) {\n    const config = loadYamlEnvOptions(options, schema);\n    this._config = config;\n  }\n\n  /**\n   * 获取验证后的配置对象\n   * @returns 类型安全的配置对象\n   */\n  get config(): T {\n    return this._config;\n  }\n}\n","import { z } from 'zod';\nimport { Environment } from '../common/constants/app.constant';\n\nexport const EnvSchema = z.object({\n  /**\n   * API服务配置部分\n   */\n  app: z.object({\n    port: z.coerce.number().default(3000), // API服务端口，默认3000\n    globalPrefix: z.string().default('api'), // API全局路由前缀，默认'api'\n    NODE_ENV: z\n      .enum([Environment.DEVELOPMENT, Environment.PRODUCTION, Environment.TEST])\n      .default(Environment.DEVELOPMENT), // 环境变量，默认'development'\n  }),\n\n  /**\n   * 日志配置部分\n   */\n  logger: z.object({\n    trackingIdHeader: z.coerce.string().optional(), // 可选的追踪ID请求头\n  }),\n\n  /**\n   * 数据库配置部分\n   */\n  database: z.object({\n    user: z.string(), // 数据库用户名\n    password: z.string(), // 数据库密码\n    host: z.string(), // 数据库主机地址\n    port: z.coerce.number().default(5432),\n    name: z.string(), // 数据库名称\n    systemSchema: z.string(), // 系统Schema（用于存储租户信息等系统表）\n    pool: z\n      .object({\n        max: z.number().optional(),\n        min: z.number().optional(),\n        idle_timeout: z.number().optional(),\n        connect_timeout: z.number().optional(),\n        max_lifetime: z.number().optional(),\n      })\n      .optional(),\n    isolationStrategy: z.enum(['schema', 'row']).default('row'), // 租户隔离策略：schema=独立Schema隔离，row=行级安全隔离\n  }),\n});\n\nexport type EnvValidatedConfig = z.infer<typeof EnvSchema>;\n","module.exports = require(\"zod\");","/** 标记路由为公开访问(无需认证) */\nexport const IS_PUBLIC = 'isPublic';\n\n/** 标记路由为可选认证 */\nexport const IS_AUTH_OPTIONAL = 'isAuthOptional';\n\n/**\n * 环境枚举\n * @enum {string}\n */\nexport enum Environment {\n  /** 本地环境 */\n  LOCAL = 'local',\n  /** 开发环境 */\n  DEVELOPMENT = 'development',\n  /** 预发布环境 */\n  STAGING = 'staging',\n  /** 生产环境 */\n  PRODUCTION = 'production',\n  /** 测试环境 */\n  TEST = 'test',\n}\n\n/**\n * 日志服务枚举\n * @enum {string}\n */\nexport enum LogService {\n  /** 控制台日志 */\n  CONSOLE = 'console',\n  /** Google Cloud Logging 服务 */\n  GOOGLE_LOGGING = 'google_logging',\n  /** AWS CloudWatch 日志服务 */\n  AWS_CLOUDWATCH = 'aws_cloudwatch',\n}\n\n/**\n * 排序方向枚举\n * @enum {string}\n */\nexport enum Order {\n  /** 升序 */\n  ASC = 'ASC',\n  /** 降序 */\n  DESC = 'DESC',\n}\n\n/** 需要在日志中隐藏的敏感信息路径 */\nexport const loggingRedactPaths = [\n  'req.headers.authorization',\n  'req.body.token',\n  'req.body.refreshToken',\n  'req.body.email',\n  'req.body.password',\n  'req.body.oldPassword',\n];\n\n/** 默认分页大小 */\nexport const DEFAULT_PAGE_LIMIT = 10;\n\n/** 默认当前页码 */\nexport const DEFAULT_CURRENT_PAGE = 1;\n\n/** 系统用户ID */\nexport const SYSTEM_USER_ID = 'system';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}